
//Author- SHUBHAM RAMESH JIWTODE ,Syracuse university
..........................................................................*/


//Time Complexity O((N + E) log N)
#include "stdafx.h"
#include <iostream>
#include <vector>
#include <fstream>
using namespace std;
class e_node { //stands for edge node
public:
	int nb;//the neighbor of a currently considered node
	int weight; //weight of the edge to the above neighbor
	e_node() {}//constructor
};
class rt_node { //rt stands for routing table
public:
	int cost;  //cost to a node
	int from;  //the from node to this node
	int checked;
	int h_pos; //the postion in heap for this node
	rt_node() { from = -1;  cost = 9999;  checked = 0; }
};

class h_node { //stands for heap_node
public:
	int id;
	int cost;
	h_node() { id = -1; cost = 9999; }
	h_node(int i, int j) { id = i; cost = j; }
	bool operator<(h_node h) { return (cost < h.cost); }
};

void set_up(vector<rt_node> &rt, vector<h_node> & heap, int &start); //Insert the souce node to heap and update rt and heap accordingly
void heap_adjust_up(vector<rt_node> &rt, vector<h_node> & heap, int &n);
void heap_adjust_down(vector<rt_node> & rt, vector<h_node> & heap);
void heap_op(vector<vector<e_node>> & graph, vector<rt_node> & rt, vector<h_node> &heap);

int main() {

	ifstream in("text1.txt");
	int start;
	in >> start;//source node for the Dijkstra's algorithm
	int n, e; //n: num of nodes ; e: num of edges
	in >> n >> e;
	vector<e_node> ve;
	vector<vector<e_node> > graph(n, ve);
	e_node e1;
	int n1, n2, w;
	for (int i = 0; i < e; i++) {
		in >> n1 >> n2 >> w;
		e1.nb = n2;
		e1.weight = w;
		graph[n1].push_back(e1);
	}
	in.close();
	vector<rt_node> rt(n); //rt stands for routing table
	vector<h_node> heap(n);

	set_up(rt, heap, start);
	heap_op(graph, rt, heap);

	for (int i = 0; i < n; i++) {

		cout << "cost from" << start << " to " << i << " is: " << rt[i].cost << "  from node is " << rt[i].from << endl;
	}
	getchar();
	getchar();
	return 0;
}


void set_up(vector<rt_node> &rt, vector<h_node> & heap, int &start) {

	rt[start].from = start;
	rt[start].cost = 0;
	for (size_t i = 0; i < heap.size(); i++) {
		heap[i].id = i;
		rt[i].h_pos = i;
	}
	heap[start].id = 0;
	heap[0].id = start;
	heap[0].cost = 0;
	rt[0].h_pos = start;
	rt[start].h_pos = 0;
}


void heap_adjust_down(vector<rt_node> & rt, vector<h_node> & heap) {
	int i = 0;
	if ((2 * i) + 2 <= heap.size())
	{

		if (2 * i + 1 < heap.size() && heap[2 * i + 1].cost < heap[i].cost) {
			h_node hTemp;
			hTemp.id = heap[2 * i + 1].id;
			hTemp.cost = heap[2 * i + 1].cost;
			heap[2 * i + 1].id = heap[i].id;
			heap[2 * i + 1].cost = heap[i].cost;
			heap[i].id = hTemp.id;
			heap[i].cost = hTemp.cost;
			rt[heap[2 * i + 1].id].h_pos = 2 * i + 1;
			rt[heap[i].id].h_pos = i;
			i = 2 * i + 1;
		}
		if (2 * i + 2 < heap.size() && heap[2 * i + 2].cost < heap[i].cost) {
			h_node hTemp;
			hTemp.id = heap[2 * i + 2].id;
			hTemp.cost = heap[2 * i + 2].cost;
			heap[2 * i + 2].id = heap[i].id;
			heap[2 * i + 2].cost = heap[i].cost;
			heap[i].id = hTemp.id;
			heap[i].cost = hTemp.cost;
			rt[heap[2 * i + 2].id].h_pos = 2 * i + 2;
			rt[heap[i].id].h_pos = i;
			i = 2 * i + 2;
		}
	}
}

void heap_adjust_up(vector<rt_node> & rt, vector<h_node> & heap, int &n) {

	
	int i = n;
	
	while (i > 0)
	{
		int rootLoc = (i - 1) / 2;
		if (heap[rootLoc].cost > heap[i].cost) {
			
			h_node hTemp;
			rt[heap[i].id].h_pos = rootLoc;
			rt[heap[rootLoc].id].h_pos = i;
			hTemp.id = heap[i].id;
			hTemp.cost = heap[i].cost;
			heap[i].id = heap[rootLoc].id;
			heap[rootLoc].id = hTemp.id;
			heap[i].cost = heap[rootLoc].cost;
			heap[rootLoc].cost = hTemp.cost;
			
		}
	     i--;
	}
}

void heap_op(vector<vector<e_node>> & graph, vector<rt_node> & rt, vector<h_node> &heap) {
	
	for (size_t i = 0; i < rt.size(); i++) 
	{
		h_node small;
		small = heap[0];
		
		heap[0].id = heap[(heap.size() - 1)].id;
		heap[0].cost = heap[(heap.size() - 1)].cost;
		rt[heap[0].id].h_pos = 0;
		heap.pop_back();
		
	    for (vector<e_node>::iterator i = graph[small.id].begin(); i != graph[small.id].end(); i++) 
		{
			if (rt[i->nb].checked != 1) 
			{
			    int n = i->nb;
			    int w = i->weight;
				if (rt[n].cost > (w + small.cost))
				{
					heap[rt[n].h_pos].cost = w + small.cost;
					rt[n].from = small.id;
					rt[n].cost = w + small.cost;
					heap_adjust_up(rt, heap, rt[n].h_pos);
				}
			}
		}    	
		rt[small.id].checked = 1;//checked the small node
		rt[small.id].h_pos = heap.size() - 1;
		heap_adjust_down(rt, heap);
	}
}
 