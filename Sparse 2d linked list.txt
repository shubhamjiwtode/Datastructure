
//Author- SHUBHAM RAMESH JIWTODE ,Syracuse university
..........................................................................*/
#include "stdafx.h"
#include <iostream>
#include <vector>

using namespace std;

class node {
public:
	int value;
	int r_position;
	int c_position;
	node * r_next;
	node * c_next;
	node() { value = -9999; r_position = c_position = -1; r_next = c_next = nullptr; }
	node(int v, int r, int c) { value = v; r_position = r; c_position = c; r_next = c_next = nullptr; }

};
class my_matrix {
public:
	int num_rows;
	int num_cols;
	vector<node *> r_vec;
	vector<node *> c_vec;


	my_matrix() {}
	my_matrix(int r, int c);
	//Initialize a matrix of rows and c cols.

	my_matrix(int r, int c, int n, int k);
	//Initializa a matrix of r rows, c cols, n nodes, with values randomly in - (k-1) ... (k-1);
	void print(); //print value, r_position, and c_position of all matrix elements in row-oriented manner


				  //Implement the following three member functions:

	void add_node(int v, int r, int c);
	//Create a new node with value v at row r and col c.
	//If there already exists an element at this position, then just update the node
	//value at this position to v, and do not create a new node.

	my_matrix operator+(my_matrix M);//matrix addition

    my_matrix operator*(my_matrix M); //matrix multiplication


};

my_matrix::my_matrix(int r, int c) {
	num_rows = r;
	num_cols = c;
	r_vec.resize(r, nullptr);
	c_vec.resize(c, nullptr);
}


my_matrix::my_matrix(int r, int c, int n, int k) {
	num_rows = r;
	num_cols = c;
	r_vec.resize(r, nullptr);
	c_vec.resize(c, nullptr);
	for (int i = 0; i < n; i++) {
		int vv = rand() % (2 * k - 1) - (k - 1);
		int rr = rand() % r;
		int cc = rand() % c;
		//cout << "--------------------------  " << vv << " " << rr << " " << cc;
		add_node(vv, rr, cc);
	}
}

void my_matrix::add_node(int v,int r,int c) {
	
	node *p1=new node();
	node * rprev=nullptr, *cprev=nullptr ,*rcur=nullptr,*ccur=nullptr;
	p1->value = v;
	p1->r_position = r;
	p1->c_position = c;
	p1->r_next = nullptr;
	p1->c_next = nullptr;
	//r_vec[r] = rcur;
	rcur=r_vec[r];
	ccur=c_vec[c];
	////////////////////////////////////////////////////////// When there are no value in matrix
	if ((rcur== nullptr) &&( ccur==nullptr))
	{
		if (v!=0)
		{
			c_vec[c] = p1;
			r_vec[r] = p1;
		}
	}
	///////////////////////////////////////////////////////// when we have value in r row but no value in c column
	else if (rcur!=nullptr && ccur==nullptr)
	{
		while (rcur != nullptr)
		{
			if (p1->c_position < rcur->c_position && v != 0)
			{
				p1->r_next = rcur;
				r_vec[r] = p1;
				c_vec[c] = p1;

				return;
			}
			else if (rcur->r_next != nullptr && p1->c_position > rcur->c_position && p1->c_position < rcur->r_next->c_position && v != 0)
			{
				p1->r_next=rcur->r_next;
				rcur->r_next = p1;
				c_vec[c] = p1;
				return;
			}
			else if (rcur->r_next == nullptr && p1->c_position > rcur->c_position &&v != 0)
			{
				p1->r_next=rcur->r_next;
				rcur->r_next = p1;
				c_vec[c] = p1;
				return;
			}
			rprev = rcur;
			rcur = rcur->r_next;
		}
	}
	//////////////////////////////////////////////////////// when we have value in c column but no value in r row
	else if (rcur == nullptr && ccur != nullptr)
	{
		while (ccur != nullptr)
		{
			if (p1->r_position < ccur->r_position && v != 0)
			{
				p1->c_next = ccur;
				c_vec[c] = p1;
				r_vec[r] = p1;
				return;
			}
			else if (ccur->c_next != nullptr && p1->r_position > ccur->r_position && p1->r_position < ccur->c_next->r_position && v != 0)
			{
				p1->c_next=ccur->c_next ;
				ccur->c_next = p1;
				r_vec[r] = p1;
				return;
			}
			else if (ccur->c_next == nullptr && p1->r_position > ccur->r_position && v != 0)
			{
				ccur->c_next = p1;
				r_vec[r] = p1;
				return;
			}
			cprev = ccur;
			ccur = ccur->c_next;
		}	
	}
	//////////////////////////////////////////////////////// when we have value in both r and c
	else if (rcur != nullptr && ccur != nullptr)
	{
		while (rcur != nullptr)
		{
			if (p1->c_position < rcur->c_position && v!=0) //////////////////////////// start position 
			{
					p1->r_next = rcur;
					r_vec[r] = p1;
				///////////////// column linking
				while (ccur != nullptr)
				{
					if (p1->r_position < ccur->r_position && v!=0)
					{
						p1->c_next = ccur;
						c_vec[c] = p1;
						return;
					}
					else if (ccur->c_next != nullptr && p1->r_position > ccur->r_position && p1->r_position < ccur->c_next->r_position)
					{
						p1->c_next=ccur->c_next ;
						ccur->c_next = p1;
						return;
					}
					else if (ccur->c_next == nullptr && p1->r_position > ccur->r_position )
					{
						ccur->c_next = p1;
						return;
					}
					cprev = ccur;
					ccur = ccur->c_next;
				}
			}
			else if (p1->c_position == rcur->c_position)/////////////////////// particular row
			{
				rcur->value = p1->value;
				
				if (p1->value == 0)
				{
					if (rprev)
					{
						rprev->r_next = rcur->r_next;
						delete(rcur);
					}
					else
					{
						r_vec[r] = rcur->r_next;
					}
				}
				//////////////////////////////// column linking
				while (ccur != nullptr)
				{
					if (p1->r_position == ccur->r_position)
					{
						ccur->value = p1->value;
						if (p1->value == 0)
						{
							if (cprev)
							{
								cprev->c_next = ccur->c_next;
								delete(ccur);
								return;
							}
							else
							{
								c_vec[c] = ccur->c_next;
								return;
							}
						}
						return;
					}
					cprev = ccur;
					ccur = ccur->c_next;
				}
			}
			else if (rcur->r_next != nullptr && p1->c_position > rcur->c_position && p1->c_position < rcur->r_next->c_position && v!=0)////////////// middle in the row
			{
				p1->r_next=rcur->r_next;
					rcur->r_next = p1;
				
				//////////////////////////////// column linking
				while (ccur != nullptr)
				{
					if (p1->r_position < ccur->r_position)
					{
						p1->c_next = ccur;
						c_vec[c] = p1;
						return;
					}
					else if (ccur->c_next != nullptr && p1->r_position > ccur->r_position && p1->r_position < ccur->c_next->r_position)
					{
						p1->c_next=ccur->c_next;
						ccur->c_next = p1;
						return;
					}
					else if (ccur->c_next == nullptr && p1->r_position > ccur->r_position)
					{			
						ccur->c_next = p1;
						return;
					}
					cprev = ccur;
					ccur = ccur->c_next;
				}
			}
			else if (rcur->r_next == nullptr && p1->c_position > rcur->c_position && v!=0)///////////////////// entering at end of row
			{
				p1->r_next=rcur->r_next;
					rcur->r_next = p1;
					
				//////////////////////////////// column linking
				while (ccur != nullptr)
				{
					if (p1->r_position < ccur->r_position)
					{
						p1->c_next = ccur;
						c_vec[c] = p1;
						return;
					}
					else if (ccur->c_next != nullptr && p1->r_position > ccur->r_position && p1->r_position < ccur->c_next->r_position )
					{
						p1->c_next=ccur->c_next ;
						ccur->c_next = p1;
						return;
					}
					else if (ccur->c_next == nullptr && p1->r_position > ccur->r_position )
					{
						ccur->c_next = p1;
						return;
					}
					cprev = ccur;
					ccur = ccur->c_next;
				}
			}
			rprev = rcur;
			rcur = rcur->r_next;
		}
	}
}

my_matrix my_matrix::operator+(my_matrix M) {
	cout  << endl << "------------------Add matrix is below---------------------------";
	node*p1=nullptr, *p2=nullptr;
	my_matrix temp(this->num_rows,this->num_cols);
	if ((this->num_rows == M.num_rows) && (this->num_cols == M.num_cols))
	{
		for (int i = 0; i < this->num_rows; i++)
		{

			p1 = this->r_vec[i];
			p2 = M.r_vec[i];

			while ((p1 != nullptr) && (p2 != nullptr))
			{
				if ((p1->c_position > p2->c_position))
				{
					temp.add_node(p2->value, p2->r_position, p2->c_position);
					p2 = p2->r_next;
				}
				else if ((p1->c_position < p2->c_position))
				{
					temp.add_node(p1->value, p1->r_position, p1->c_position);
					p1 = p1->r_next;

				}
				else if (p1->c_position == p2->c_position)                             //adding value at same position
				{
					temp.add_node((p1->value + p2->value), p1->r_position, p1->c_position);
					p1 = p1->r_next;
					p2 = p2->r_next;
				}
			}                                                                     //when one (p1 or p2) becomes null but other still has a value
			if (p1 != nullptr && p2 == nullptr)
			{
				while (p1 != nullptr)
				{
					temp.add_node(p1->value, p1->r_position, p1->c_position);
					p1 = p1->r_next;
				}
			}
			if (p2 != nullptr && p1 == nullptr)
			{
				while (p2 != nullptr)
				{
					temp.add_node(p2->value, p2->r_position, p2->c_position);
					p2 = p2->r_next;
				}
			}
		}
		return temp;
	}
	else
	{
		temp.add_node(99999, 2, 2);
		cout << endl << "invalid matrices";
		return temp;
	}
}

my_matrix my_matrix::operator*(my_matrix M) {
	cout <<endl<< "------------------Mult matrix is below---------------------------";
	node*p1 = nullptr, *p2 = nullptr;
	my_matrix temp(this->num_rows,M.num_cols);
	if (this->num_cols == M.num_rows)
	{
		for (int i = 0; i < this->num_rows; i++)
		{
			for (int j = 0; j < M.num_cols; j++)
			{
				int x = 0;
				p1 = this->r_vec[i];
				p2 = M.c_vec[j];

				while (p1 != nullptr && p2 != nullptr)
				{
					if (p2->r_position < p1->c_position)
					{
						p2 = p2->c_next;
					}
					else if (p2->r_position > p1->c_position)
					{
						p1 = p1->r_next;
					}
					else if (p2->r_position == p1->c_position)
					{

						x = x + ((p1->value)*(p2->value));
						p1 = p1->r_next;
						p2 = p2->c_next;
					}

				}
				temp.add_node(x, i, j);
			}

		}
		return temp;
	}
	else
	{
		temp.add_node(99999, 2, 2);
		cout << endl << "invalid matrices";
		return temp;
	}
}

void my_matrix::print() {
	
	for (int i = 0; i < num_rows; i++) {
		node * p = r_vec[i];
		cout << endl;
		while (p != nullptr) {
			cout << p->value << " " << p->r_position << " " << p->c_position << "  ";
			p = p->r_next;
		}
	}
}

int main() {
	my_matrix M1(7, 5, 11, 8), M2(7, 5, 10, 8) , M3(7, 5), M4(5, 6, 13, 9), M5(7, 6);
	M1.print();
	M2.print();
    M3 = M1 + M2;
	M3.print();
	M1.print();
	M4.print();
	M5 = M1 * M4;
	M5.print();
	getchar();
	getchar();
	return 0;
}