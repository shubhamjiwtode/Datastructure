

AUTHOR- SHUBHAM RAMESH JIWTODE #870427143
Syracuse University.

..........................................................................*/

#include "stdafx.h"

#include <iostream>

using namespace std;

class node {
public:
	int value;
	node * next;
	node() { next = nullptr; }
	node(int k) { value = k; next = nullptr; }
};

class linked_list {
public:
	int num_nodes;
	node * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void make_random_list(int k);//create a linked list of 
								 //k nodes with values in 0 ..99 randomly
	void print(); //Print values of all nodes from head node

	void reverse(); //Reverse the order of nodes of linked list
					//*********************
					//Implement the following three member functions.  

	void sort(); //Sort the nodes, based on ascending order of node values

	void insert(int k); //Create a new node with values k, and properly add it to an already sorted list
						//After the insertion, the entire linked list is still sorted.

	void remove_all(int k); //Remove all nodes whose node values are equal to k

	void new_make_random_list(int k, int m);
};
void linked_list::make_random_list(int k) {
	node * p;
	for (int i = 0; i < k; i++) {
		p = new node(rand() % 100);
		p->next = head;
		head = p;
		num_nodes++;
	}
}

void linked_list::new_make_random_list(int k, int m) {
	node * p;
	for (int i = 0; i < k; i++) {
		p = new node(rand() % m);
		p->next = head;
		head = p;
		num_nodes++;
	}
}


void linked_list::insert(int k) {
	node *p,*pnext; 
	node *temp=new node();
	temp->value = k;
	temp->next = nullptr;
	p = head;

	if (head == nullptr)                                                //if there are no nodes
	{
		cout << "created new list" <<" "<< "Added the first value";
		head = temp;
	}
	else                                                                //if there are one or more nodes 
	{
		sort();
		cout << "  inserted " << k;
		p = head;
		pnext = nullptr;
		while (true)
		{
			pnext = p->next;
		
		 if (temp->value < p->value) 
		 {                                  //if inserted value is less than value in head node
			temp->next = p;
			p= temp;
			head = p;
			return;
		}
		 		 else if (p->next == nullptr)                           //if there is only one node:-
		 {
			 if (temp->value >= p->value)                                                 //case 1-inserted value grater or equal to value in single head node
			 {
				 temp->next = p->next;
				 p->next = temp;
				 return;
			 }
			 else                                                                         //case 2-inserted value less than value in single head node
			 {
				 temp->next = head;
				 temp = head;
				 return;
			 }
		 }
		 else if (temp->value >= p->value && temp->value < pnext->value) //if value is in betwwen he linked list
		 {
			 temp->next = p->next;
			 p->next = temp;
			 return;
		 }
					p = p->next;
		} 
		
	}
	
}

void linked_list::remove_all(int k) {
	node * p=head,*pre=nullptr;

	int x = k;

      	if (head == nullptr) {                                              //if there are no items in the list.
		     cout << endl<<endl << "no item in the list to remove" ;
	    return;
	       }
		if(p->value == x && p==head){                                    //if the valur to be removed is head value.
			head = p->next;
				delete(p); 
				remove_all(x);   
			                                                  //if duplicate value exists
				return;
			}
		while (true)
		{
			pre = p;
			if (p->next != nullptr)
			{
				p = p->next;                                   //if any value other than head
				if (p->value == x)
				{
					pre->next = p->next;
					delete(p);
					remove_all(x);
					return;
				}
			}                                                                          
			else
			{
				cout <<endl<<endl<< "value "<<x<<" ,doesnt exist or has been deleted";
				return;
			}
		}
}


void linked_list::print() {
	node * p = head;
	cout << endl;
	
	while (p != nullptr) {
		cout << p->value<<" ";
		p = p->next;	} 
	
}

void linked_list::reverse() {
	cout <<endl<<endl<< "reversed list is" ;
	if (num_nodes <= 1)
	{                                                                //if no node or single node
		return;
	}
	node * p1 = head, *p2 = head->next, *p3;
	while (p2 != nullptr) {
		p3 = p2->next;
		p2->next = p1;
		if (p1 == head) p1->next = nullptr;
		p1 = p2;
		p2 = p3;
	}
	head = p1;
}

void linked_list::sort() {
	
	node * p1 = head,* p2=nullptr;
	int x = 0;	
	for (int i = 0; i < num_nodes; i++)
	{
		while (p1->next != nullptr)                     //to check if list has single node or no node
		{
			p2 = p1->next;
			if (p1->value > p2->value) 
			{
				x = p1->value;
				p1->value = p2->value;
				p2->value = x;
				}		
			p1 = p1->next;		
		}
		p1 = head;		
		}	
	cout << endl<< endl<<"sorted list";
}


int main() {

	int x = 0;
	linked_list L1;

	L1.new_make_random_list(50, 7);
	L1.print();
	L1.remove_all(1);
	L1.print();
	L1.remove_all(6);
	L1.print();

	linked_list L2;
	L2.new_make_random_list(60, 20);
	L2.sort();
	L2.print();

	L2.insert(-1);
	L2.print();
	L2.insert(20);
	L2.print();
	L2.insert(15);
	L2.print();
	L2.insert(10);
	L2.print();
	
	/*	 used Switch case for testing the code

	while (1)
	{
		cout <<endl<< "1.Make a random list." << endl;
		cout << "2.Reverse the list" << endl;
		cout << "3.Sort the linked list" << endl;
		cout << "4.Insert a value" << endl;
		cout << "5.Remove a value" << endl;
		cout << "6.Exit"<<endl;
		cout << "-Enter your choice-" << endl;
		
		cin >> x;
		int a = 0;
		switch (x)
		{
		case 1:
			cout << endl<<"enter the number of nodes " << endl;
			cin >> a;
			L1.make_random_list(a);
			L1.print();
			break;
		case 2:
			L1.reverse();
			cout << "Reversed list is" << endl;
			L1.print();
			break;
		case 3:
			L1.sort();
			cout << "Sorted list is" << endl;
			L1.print();
			break;
		case 4:cout << endl<<"enter the value to be inserted" << endl;
			cin >> a;
			L1.insert(a);
			L1.print();
			break;
		case 5: cout << endl<<"enter the value to be removed" << endl;
			cin >> a;
			L1.remove_all(a);
			L1.print();
			break;
		case 6:
			exit(1);
			break;
		default:
			break;
		}
	}*/
		getchar();
		getchar();
		return 0;
}