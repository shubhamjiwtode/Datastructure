
//Author- SHUBHAM RAMESH JIWTODE ,Syracuse university

#include "stdafx.h"
#include <iostream>
#include<fstream>


using namespace std;
ofstream out("data1.txt");



class node {
public:
	int value;
	node * next;
	node() { next = nullptr; }
	node(int k) { value = k; next = nullptr; }
};

class linked_list {
public:
	int num_nodes;
	node * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void make_random_list(int k);//create a linked list of 
								 //k nodes with values in 0 ..99 randomly
	void print(); //Print values of all nodes from head node

	void reverse(); //Reverse the order of nodes of linked list	
					//void remove_all(int k); //Remove all nodes whose node values are k
					//void insert(int k); //create a new node with value k and insert it to an already sorted list. After the insert, the linked list is still sorted.


					//*********************
					//Implement the following member functions.  

	void bubble_sort(); //Bubble-Sort the nodes, based on ascending order of node values
	void selection_sort(); //Selection-Sort the nodes, based on ascending order of node values
	void insertion_sort(); //Insert - Sort the nodes, based on ascending order of node values


};

void linked_list::insertion_sort() {
	node *p1 = head,*p2,*p;
	

	int a=0,b=0,cnt=0;
	if (head == nullptr) { cout << endl << "no value"; return; }
	if (head->next == nullptr) { cout << endl << "only one value cant sort"; return; }

	for (int i = 0; i < num_nodes; i++)
	{
		while (p1->next!=nullptr)
		{
			if (p1->value > (p1->next)->value) 
			{
				a = (p1->next)->value;
				(p1->next->value) = p1->value;
				p1->value = a;
				p1 = p1->next;	
				
			}
			else if (p1->value <= p1->next->value) { 
				p1 = p1->next;
				while (p1->next != nullptr && p1->value > p1->next->value)
				{
					p2 = head;
					if (p1 != p2) {
						while (p2->next != p1)
						{
							p2 = p2->next;
						}
						if (p1->next->value < p1->value)
						{
							b = p1->value;
							p1->value = p1->next->value;
							p1->next->value = b;
							p1 = p2;
						}
					}
					 if (p1 == head) {
						if (p1->next->value < p1->value)
						{
							b = p1->value;
							p1->value = p1->next->value;
							p1->next->value = b;
						}
					}
				}
			}
		}
		
	}
}

void linked_list::selection_sort() {
	node *p1 = head, *p2 = nullptr, *pmin = nullptr, *p3 = head;
	int min;
	if (p3 == nullptr) { cout << endl << "no value"; return; }
	if (p3->next == nullptr) { cout << endl << "only one value cant sort"; return; }
	for (int i = 0; i < num_nodes; i++)
	{
		pmin = p1 = p3;
		while (p1 != nullptr)
		{
			if (p1->value < pmin->value)
			{
				pmin = p1;
			}p1 = p1->next;
		}
			min = p3->value;
			p3->value = pmin->value;
			pmin->value = min;
		    p3 = p3->next;
	}
}


void linked_list::bubble_sort() {
	node * p1 = head, *p2 = nullptr;
	int x = 0;
	if (head == nullptr) { cout << endl << "no value"; return; }
	if (head->next == nullptr) { cout << endl << "only one value cant sort"; return; }
	for (int i = 0; i < num_nodes; i++)
	{
		while (p1->next != nullptr)
		{
			p2 = p1->next;
			if (p1->value > p2->value)
			{
				x = p1->value;
				p1->value = p2->value;
				p2->value = x;
			}
			p1 = p1->next;
		}
		p1 = head;
	}
}


void linked_list::make_random_list(int k) {
	node * p;
	for (int i = 0; i < k; i++) {
		p = new node(rand() % 100);
		p->next = head;
		head = p;
		num_nodes++;
	}
}


void linked_list::print() {
	node * p = head;
	out << endl;
	while (p != nullptr) {
		out << p->value << " ";
		p = p->next;
	}
}

void linked_list::reverse() {
	if (num_nodes <= 1) return;
	node * p1 = head, *p2 = head->next, *p3;
	while (p2 != nullptr) {
		p3 = p2->next;
		p2->next = p1;
		if (p1 == head) p1->next = nullptr;
		p1 = p2;
		p2 = p3;
	}
	head = p1;
}
int main() {
	linked_list L1;
	L1.make_random_list(70);
	L1.print();
	L1.bubble_sort();
	L1.print();

	cout << endl;

	linked_list L2;
	L2.make_random_list(70);
	L2.print();
	L2.selection_sort();
	L2.print();

	cout << endl;

	linked_list L3;
	L3.make_random_list(70);
	L3.print();
	L3.insertion_sort();
	L3.print();

	out.close();
	return 0;
}

